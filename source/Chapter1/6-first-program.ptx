<?xml version="1.0"?>
<section xml:id="chapter1_the-first-program-hello">
  <title>The First Program</title>
  <p>Traditionally the first program people write in a new language is called <q>Hello, World.</q>
    because all it does is print the words <q>Hello, World.</q> In C++, this program looks like
    this:</p>
  <p>The <q>Hello, World.</q> program is a great place to start learning a new language. Observe the
    program structure below.</p>
  <listing label="first_program_AC_list"
           xml:id="first_program_AC_list">
    <title> This program prints <q>Hello, World.</q> to the output. </title>
    <program interactive="activecode" line-numbers="yes" label="first_prog_editor">
      <code><![CDATA[
#include <iostream>
using namespace std;
// main: generate some simple output
int main() {
    cout << "Hello, World." << endl;
    return 0;
}
        ]]></code>
    </program>
  </listing>
  <p>Some people judge the quality of a programming language by the simplicity of the <q>Hello,
    World.</q> program. By this standard, C++ does reasonably well. Even so, this simple program
    contains several features that are hard to explain to beginning programmers. For now, we will
    ignore some of them, like the first two lines.</p>
  <p>The third line of <xref ref="first_program_AC_list"/> begins with <c>//</c>, which indicates that
    it is a <term>comment</term>. A comment is a bit of English text that you can put in the middle
    of a program, usually to explain what the program does. When the compiler sees a <c>//</c>, it
    ignores everything from there until the end of the line.</p>
  <p>In the fourth line, you can ignore the word <c>int</c> for now, but notice the word <c>main</c> . <c>main</c>
    is a special name that indicates the place in the program where execution begins. When the
    program runs, it starts by executing the first statement in <c>main</c> and it continues, in order,
    until it gets to the last statement, and then it quits.</p>
  <p>There is no limit to the number of statements that can be in <c>main</c>, but the example contains
    only one. It is a basic <term>output</term> statement, meaning that it outputs or displays a
    message on the screen.</p>
  <p><c>cout</c> is a special object provided by the system to allow you to send output to the screen.
    The symbol <c>&lt;&lt;</c> is an operator that you apply to <c>cout</c> and a string, and that causes the
    string to be displayed.</p>
  <p><c>endl</c> is a special symbol that represents the end of a line. When you send an <c>endl</c> to <c>cout</c>,
    it causes the cursor to move to the next line of the display. The next time you output
    something, the new text appears on the next line.</p>
  <p>Like all statements, the output statement ends with a semi-colon (<c>;</c>).</p>
  <warning>
    <p>Failure to terminate a statement with a semicolon will result in a syntax (compile) error.</p>
  </warning>
  <p>The statement <c>return 0;</c>at the end fulfills the promise made by <c>int main</c> to return a value. You
    will learn more about it in Chapter 5. For now, you just need to know that it is optional. If
    you do not have that line at the end of <c>main</c>, it is automatically added. You will see many
    code samples that take advantage of this in the coming chapters and omit that <c>return 0;</c>.</p>
  <p>There are a few other things you should notice about the syntax of this program. First, C++
    uses squiggly-braces (<c>{</c> and <c>}</c>) to group things together. In this case, the output
    statement is enclosed in squiggly-braces, indicating that it is <em>inside</em> the definition
    of <c>main</c>. Also, notice that the statement is indented, which helps to show visually which
    lines are inside the definition.</p>
  <p>As I mentioned, the C++ compiler is a real stickler for syntax. If you make any errors when you
    type in the program, chances are that it will not compile successfully. For example, if you
    misspell <c>iostream</c>, you might get an error message like the following:</p>
  <program>
hello.cpp:1: oistream.h: No such file or directory
</program>
  <p>There is a lot of information on this line, but it is presented in a
    dense format that is not easy to interpret. A more friendly compiler
    might say something like:</p>
  <blockquote>
    <p>
      <q>On line 1 of the source code file named hello.cpp, you tried to include a header file named <c>oistream.h</c>.
        I didn't find anything with that name, but I did find something named <c>iostream</c>. Is that what
        you meant, by any chance?</q>
    </p>
  </blockquote>
  <p>Unfortunately, few compilers are so accomodating. The compiler is not
    really very smart, and in most cases the error message you get will be
    only a hint about what is wrong. It will take some time to gain facility
    at interpreting compiler messages.</p>
  <p>Nevertheless, the compiler can be a useful tool for learning the syntax
    rules of a language. Starting with a working program above,
    modify it in various ways and see what happens. If you get an error
    message, try to remember what the message says and what caused it, so if
    you see it again in the future you will know what it means.</p>
  <exercise label="first_program_1">
    <statement>
      <p>How do you indicate a single line comment in C++? <fillin answer="//"/>
      </p>
    </statement>
    <evaluation>
      <evaluate>
        <test correct="yes">
          <strcmp use-answer="yes"/>
        </test>
      </evaluate>
    </evaluation>
  </exercise>
  <exercise label="first_program_2">
    <statement>
      <p><term>Multiple Response</term> Which is true about writing a program?</p>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>The main marks the spot in the program where execution begins.</p>
        </statement>
        <feedback><p>
          The main indicates where the program begins executing!
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>There is a limit the number of statements you can put in the main because they occupy
            system memory.</p>
        </statement>
        <feedback><p>
          There is no limit to the number of statements you can put in the main, but it is good
            practice to keep it as short as possible.
        </p></feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>Inside the main, program execution happens in order from top to bottom.</p>
        </statement>
        <feedback><p>
          When the program runs, it starts by executing the first statement in main, and it
            continues until the last.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>The main program is enclosed by parentheses.</p>
        </statement>
        <feedback><p>
          The main program and all functions in C++ are enclosed by squiggly brackets ( { and }
            ).
        </p></feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>The end of each statement is marked with a semicolon ( ; ).</p>
        </statement>
        <feedback><p>
          Forgetting a semicolon will cause a compile error!
        </p></feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="first_program_3">
    <statement>
      <p><fillin answer="cout"/> is an object that allows you to send output to the terminal. It requires you to use
        the <fillin answer="&lt;&lt;"/> operator. </p>
    </statement>
    <evaluation>
      <evaluate>
        <test correct="yes">
          <strcmp use-answer="yes" case="insensitive"/>
        </test>
      </evaluate>
      <evaluate>
        <test correct="yes">
          <strcmp use-answer="yes"/>
        </test>
      </evaluate>
    </evaluation>
  </exercise>
</section>
